//Проверка правильности последовательности операторов присваива-
//ния, правая часть которых – выражения, в которых используются
// литералы типа «множество» со значениями перечислимого типа, пе-
//ременные и операции +, -, *.
//^- начало строки,\s - пробед , \w - рандомный символ, * от 0 и до бесконечности, + от 1 и выше,одиночный \ для экранирование для спец символов,[] - диапазон,. - любой одиночный символ
fun main() {
    val str = readLine() // с помощью val не изменяемая переменная в которую записываю то что чистаю с помощью функции readLine()
    if (str!=null) {//проверка если строка не нул то исполняю действие

    val re=Regex("""\s*[A-Za-z_]+\w*\s*:=\s*(\[((\s*[A-Za-z_]+(\w*)(\.\.[A-Za-z_]+\w*)?\s*\,)*)?((\s)*[A-Za-z_]+(\w)*(\s)*(\.\.[A-Za-z_]+\w*\s*)?)?(\s*)?\]\s*[\+\-\*]*\s*)+\s*;\s*""")
        println(re.matches(str))//вывожу результат с мопощью метода matсhes который сообщает, соответствует  или нет введенная строка  регулярному выражению res
    }
    else println("Неверно введена строка")// если мы провалили иф то идем сюда и выводим сообщение

}
